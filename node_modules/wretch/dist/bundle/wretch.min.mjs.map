{"version":3,"file":"wretch.min.mjs","sources":["../../src/constants.ts","../../src/utils.ts","../../src/config.ts","../../src/resolver.ts","../../src/middleware.ts","../../src/core.ts","../../src/index.ts"],"sourcesContent":["export const JSON_MIME = \"application/json\"\nexport const CONTENT_TYPE_HEADER = \"Content-Type\"\nexport const FETCH_ERROR = Symbol()","import { CONTENT_TYPE_HEADER } from \"./constants.js\"\n\nexport function extractContentType(headers: HeadersInit = {}): string | undefined {\n  return Object.entries(headers).find(([k]) =>\n    k.toLowerCase() === CONTENT_TYPE_HEADER.toLowerCase()\n  )?.[1]\n}\n\nexport function isLikelyJsonMime(value: string): boolean {\n  return /^application\\/.*json.*/.test(value)\n}\n\nexport const mix = function (one: object, two: object, mergeArrays: boolean = false) {\n  return Object.entries(two).reduce((acc, [key, newValue]) => {\n    const value = one[key]\n    if (Array.isArray(value) && Array.isArray(newValue)) {\n      acc[key] = mergeArrays ? [...value, ...newValue] : newValue\n    } else if (typeof value === \"object\" && typeof newValue === \"object\") {\n      acc[key] = mix(value, newValue, mergeArrays)\n    } else {\n      acc[key] = newValue\n    }\n\n    return acc\n  }, { ...one })\n}\n","import { mix } from \"./utils.js\"\nimport type { Config } from \"./types.js\"\n\ndeclare const global\n\nconst config: Config = {\n  // Default options\n  options: {},\n  // Error type\n  errorType: \"text\",\n  // Polyfills\n  polyfills: {\n    // fetch: null,\n    // FormData: null,\n    // URLSearchParams: null,\n    // performance: null,\n    // PerformanceObserver: null,\n    // AbortController: null\n  },\n  polyfill(p: string, doThrow: boolean = true, instance: boolean = false, ...args: any[]) {\n    const res = this.polyfills[p] ||\n      (typeof self !== \"undefined\" ? self[p] : null) ||\n      (typeof global !== \"undefined\" ? global[p] : null)\n    if (doThrow && !res) throw new Error(p + \" is not defined\")\n    return instance && res ? new res(...args) : res\n  }\n}\n\n/**\n * Sets the default fetch options that will be stored internally when instantiating wretch objects.\n *\n * ```js\n * import wretch from \"wretch\"\n *\n * wretch.options({ headers: { \"Accept\": \"application/json\" } });\n *\n * // The fetch request is sent with both headers.\n * wretch(\"...\", { headers: { \"X-Custom\": \"Header\" } }).get().res();\n * ```\n *\n * @param options Default options\n * @param replace If true, completely replaces the existing options instead of mixing in\n */\nexport function setOptions(options: object, replace = false) {\n  config.options = replace ? options : mix(config.options, options)\n}\n\n/**\n * Sets the default polyfills that will be stored internally when instantiating wretch objects.\n * Useful for browserless environments like `node.js`.\n *\n * Needed for libraries like [fetch-ponyfill](https://github.com/qubyte/fetch-ponyfill).\n *\n * ```js\n * import wretch from \"wretch\"\n *\n * wretch.polyfills({\n *   fetch: require(\"node-fetch\"),\n *   FormData: require(\"form-data\"),\n *   URLSearchParams: require(\"url\").URLSearchParams,\n * });\n *\n * // Uses the above polyfills.\n * wretch(\"...\").get().res();\n * ```\n *\n * @param polyfills An object containing the polyfills\n * @param replace If true, replaces the current polyfills instead of mixing in\n */\nexport function setPolyfills(polyfills: object, replace = false) {\n  config.polyfills = replace ? polyfills : mix(config.polyfills, polyfills)\n}\n\n/**\n * Sets the default method (text, json, â€¦) used to parse the data contained in the response body in case of an HTTP error.\n * As with other static methods, it will affect wretch instances created after calling this function.\n *\n * ```js\n * import wretch from \"wretch\"\n *\n * wretch.errorType(\"json\")\n *\n * wretch(\"http://server/which/returns/an/error/with/a/json/body\")\n *   .get()\n *   .res()\n *   .catch(error => {\n *     // error[errorType] (here, json) contains the parsed body\n *     console.log(error.json)\n *   })\n * ```\n *\n * If null, defaults to \"text\".\n */\nexport function setErrorType(errorType: string) {\n  config.errorType = errorType\n}\n\nexport default config\n","import { middlewareHelper } from \"./middleware.js\"\nimport { mix } from \"./utils.js\"\nimport type { Wretch, WretchResponse, WretchResponseChain, WretchError as WretchErrorType } from \"./types.js\"\nimport { FETCH_ERROR } from \"./constants.js\"\n\n/**\n * This class inheriting from Error is thrown when the fetch response is not \"ok\".\n * It extends Error and adds status, text and body fields.\n */\nexport class WretchError extends Error implements WretchErrorType {\n  status: number\n  response: WretchResponse\n  url: string\n  text?: string\n  json?: any\n}\n\nexport const resolver = <T, Chain, R>(wretch: T & Wretch<T, Chain, R>) => {\n  const sharedState = Object.create(null)\n\n  wretch = wretch._addons.reduce((w, addon) =>\n    addon.beforeRequest &&\n    addon.beforeRequest(w, wretch._options, sharedState)\n    || w,\n   wretch)\n\n  const {\n    _url: url,\n    _options: opts,\n    _config: config,\n    _catchers: _catchers,\n    _resolvers: resolvers,\n    _middlewares: middlewares,\n    _addons: addons\n  } = wretch\n\n  const catchers = new Map(_catchers)\n  const finalOptions = mix(config.options, opts)\n\n  // The generated fetch request\n  let finalUrl = url\n  const _fetchReq = middlewareHelper(middlewares)((url, options) => {\n    finalUrl = url\n    return config.polyfill(\"fetch\")(url, options)\n  })(url, finalOptions)\n  // Throws on an http error\n  const referenceError = new Error()\n  const throwingPromise: Promise<void | WretchResponse> = _fetchReq\n    .catch(error => {\n      throw { __wrap: error }\n    })\n    .then(response => {\n      if (!response.ok) {\n        const err = new WretchError()\n        // Enhance the error object\n        err[\"cause\"] = referenceError\n        err.stack = err.stack + \"\\nCAUSE: \" + referenceError.stack\n        err.response = response\n        err.url = finalUrl\n        if (response.type === \"opaque\") {\n          throw err\n        }\n        return response[config.errorType]().then((body: string) => {\n          err.message = body\n          err[config.errorType] = body\n          err[\"status\"] = response.status\n          throw err\n        })\n      }\n      return response\n    })\n  // Wraps the Promise in order to dispatch the error to a matching catcher\n  const catchersWrapper = <T>(promise: Promise<T>): Promise<void | T> => {\n    return promise.catch(err => {\n      const error = err.__wrap || err\n\n      const catcher =\n        (error.status && catchers.get(error.status)) ||\n        catchers.get(error.name) || (\n          err.__wrap && catchers.has(FETCH_ERROR) && catchers.get(FETCH_ERROR)\n        )\n\n      if (catcher)\n        return catcher(error, wretch)\n\n      throw error\n    })\n  }\n  // Enforces the proper promise type when a body parsing method is called.\n  type BodyParser = <Type>(funName: string | null) => <Result = void>(cb?: (type: Type) => Result) => Promise<Awaited<Result>>\n  const bodyParser: BodyParser = funName => cb => funName ?\n    // If a callback is provided, then callback with the body result otherwise return the parsed body itself.\n    catchersWrapper(throwingPromise.then(_ => _ && _[funName]()).then(_ => cb ? cb(_) : _)) :\n    // No body parsing method - return the response\n    catchersWrapper(throwingPromise.then(_ => cb ? cb(_ as any) : _))\n\n  const responseChain: WretchResponseChain<T, Chain, R> = {\n    _wretchReq: wretch,\n    _fetchReq,\n    _sharedState: sharedState,\n    res: bodyParser<WretchResponse>(null),\n    json: bodyParser<any>(\"json\"),\n    blob: bodyParser<Blob>(\"blob\"),\n    formData: bodyParser<FormData>(\"formData\"),\n    arrayBuffer: bodyParser<ArrayBuffer>(\"arrayBuffer\"),\n    text: bodyParser<string>(\"text\"),\n    error(errorId, cb) {\n      catchers.set(errorId, cb)\n      return this\n    },\n    badRequest(cb) { return this.error(400, cb) },\n    unauthorized(cb) { return this.error(401, cb) },\n    forbidden(cb) { return this.error(403, cb) },\n    notFound(cb) { return this.error(404, cb) },\n    timeout(cb) { return this.error(408, cb) },\n    internalError(cb) { return this.error(500, cb) },\n    fetchError(cb) { return this.error(FETCH_ERROR, cb) },\n  }\n\n  const enhancedResponseChain: R extends undefined ? Chain & WretchResponseChain<T, Chain, undefined> : R = addons.reduce((chain, addon) => ({\n    ...chain,\n    ...(addon.resolver as any)\n  }), responseChain)\n\n  return resolvers.reduce((chain, r) => r(chain, wretch), enhancedResponseChain)\n}\n","import type { ConfiguredMiddleware, FetchLike } from \"./types.js\"\n\n/**\n * @private @internal\n */\nexport const middlewareHelper = (middlewares: ConfiguredMiddleware[]) => (fetchFunction: FetchLike): FetchLike => {\n  return middlewares.reduceRight((acc, curr) => curr(acc), fetchFunction) || fetchFunction\n}\n","import { mix, extractContentType, isLikelyJsonMime } from \"./utils.js\"\nimport { JSON_MIME, CONTENT_TYPE_HEADER } from \"./constants.js\"\nimport { resolver } from \"./resolver.js\"\nimport config from \"./config.js\"\nimport type { Wretch } from \"./types.js\"\n\nexport const core: Wretch = {\n  _url: \"\",\n  _options: {},\n  _config: config,\n  _catchers: new Map(),\n  _resolvers: [],\n  _deferred: [],\n  _middlewares: [],\n  _addons: [],\n  addon(addon) {\n    return { ...this, _addons: [...this._addons, addon], ...addon.wretch }\n  },\n  errorType(errorType: string) {\n    return {\n      ...this,\n      _config: {\n        ...this._config,\n        errorType\n      }\n    }\n  },\n  polyfills(polyfills, replace = false) {\n    return {\n      ...this,\n      _config: {\n        ...this._config,\n        polyfills: replace ? polyfills : mix(this._config.polyfills, polyfills)\n      }\n    }\n  },\n  url(_url, replace = false) {\n    if (replace)\n      return { ...this, _url }\n    const split = this._url.split(\"?\")\n    return {\n      ...this,\n      _url: split.length > 1 ?\n        split[0] + _url + \"?\" + split[1] :\n        this._url + _url\n    }\n  },\n  options(options, replace = false) {\n    return { ...this, _options: replace ? options : mix(this._options, options) }\n  },\n  headers(headerValues) {\n    return { ...this, _options: mix(this._options, { headers: headerValues || {} }) }\n  },\n  accept(headerValue) {\n    return this.headers({ Accept: headerValue })\n  },\n  content(headerValue) {\n    return this.headers({ [CONTENT_TYPE_HEADER]: headerValue })\n  },\n  auth(headerValue) {\n    return this.headers({ Authorization: headerValue })\n  },\n  catcher(errorId, catcher) {\n    const newMap = new Map(this._catchers)\n    newMap.set(errorId, catcher)\n    return { ...this, _catchers: newMap }\n  },\n  resolve<R = unknown>(resolver, clear: boolean = false) {\n    return { ...this, _resolvers: clear ? [resolver] : [...this._resolvers, resolver] }\n  },\n  defer(callback, clear: boolean = false) {\n    return {\n      ...this,\n      _deferred: clear ? [callback] : [...this._deferred, callback]\n    }\n  },\n  middlewares(middlewares, clear = false) {\n    return {\n      ...this,\n      _middlewares: clear ? middlewares : [...this._middlewares, ...middlewares]\n    }\n  },\n  fetch(method: string = this._options.method, url = \"\", body = null) {\n    let base = this.url(url).options({ method })\n    // \"Jsonify\" the body if it is an object and if it is likely that the content type targets json.\n    const contentType = extractContentType(base._options.headers)\n    const jsonify = typeof body === \"object\" && (!base._options.headers || !contentType || isLikelyJsonMime(contentType))\n    base =\n      !body ? base :\n        jsonify ? base.json(body, contentType) :\n          base.body(body)\n    return resolver(\n      base\n        ._deferred\n        .reduce((acc: Wretch, curr) => curr(acc, acc._url, acc._options), base)\n    )\n  },\n  get(url = \"\") {\n    return this.fetch(\"GET\", url)\n  },\n  delete(url = \"\") {\n    return this.fetch(\"DELETE\", url)\n  },\n  put(body, url = \"\") {\n    return this.fetch(\"PUT\", url, body)\n  },\n  post(body, url = \"\") {\n    return this.fetch(\"POST\", url, body)\n  },\n  patch(body, url = \"\") {\n    return this.fetch(\"PATCH\", url, body)\n  },\n  head(url = \"\") {\n    return this.fetch(\"HEAD\", url)\n  },\n  opts(url = \"\") {\n    return this.fetch(\"OPTIONS\", url)\n  },\n  body(contents) {\n    return { ...this, _options: { ...this._options, body: contents } }\n  },\n  json(jsObject, contentType) {\n    const currentContentType = extractContentType(this._options.headers)\n    return this.content(\n      contentType ||\n      isLikelyJsonMime(currentContentType) && currentContentType ||\n      JSON_MIME\n    ).body(JSON.stringify(jsObject))\n  }\n}\n","import { setOptions, setErrorType, setPolyfills } from \"./config.js\"\nimport { core } from \"./core.js\"\nimport { WretchError } from \"./resolver.js\"\nimport type { Wretch } from \"./types.js\"\n\nexport type {\n  Wretch,\n  Config,\n  ConfiguredMiddleware,\n  FetchLike,\n  Middleware,\n  WretchResponseChain,\n  WretchOptions,\n  WretchError,\n  WretchErrorCallback,\n  WretchResponse,\n  WretchDeferredCallback,\n  WretchAddon\n} from \"./types.js\"\n\n/**\n * Creates a new wretch instance with a base url and base\n * [fetch options](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch).\n *\n * ```ts\n * import wretch from \"wretch\"\n *\n * // Reusable instance\n * const w = wretch(\"https://domain.com\", { mode: \"cors\" })\n * ```\n *\n * @param _url The base url\n * @param _options The base fetch options\n * @returns A fresh wretch instance\n */\nfunction factory(_url = \"\", _options = {}): Wretch {\n  return { ...core, _url, _options }\n}\n\nfactory[\"default\"] = factory\n/** {@inheritDoc setOptions} */\nfactory.options = setOptions\n/** {@inheritDoc setErrorType} */\nfactory.errorType = setErrorType\n/** {@inheritDoc setPolyfills} */\nfactory.polyfills = setPolyfills\nfactory.WretchError = WretchError\n\nexport default factory\n"],"names":["FETCH_ERROR","Symbol","extractContentType","headers","_a","Object","entries","find","k","toLowerCase","isLikelyJsonMime","value","test","mix","one","two","mergeArrays","reduce","acc","key","newValue","Array","isArray","config","options","errorType","polyfills","polyfill","p","doThrow","instance","args","res","this","self","global","Error","WretchError","resolver","wretch","sharedState","create","_addons","w","addon","beforeRequest","_options","_url","url","opts","_config","_catchers","_resolvers","resolvers","_middlewares","middlewares","addons","catchers","Map","finalOptions","finalUrl","_fetchReq","fetchFunction","reduceRight","curr","middlewareHelper","referenceError","throwingPromise","catch","error","__wrap","then","response","ok","err","stack","type","body","message","status","bodyParser","funName","cb","_","catcher","get","name","has","responseChain","_wretchReq","_sharedState","json","blob","formData","arrayBuffer","text","errorId","set","badRequest","unauthorized","forbidden","notFound","timeout","internalError","fetchError","enhancedResponseChain","chain","r","core","_deferred","replace","split","length","headerValues","accept","headerValue","Accept","content","auth","Authorization","newMap","resolve","clear","defer","callback","fetch","method","base","contentType","jsonify","delete","put","post","patch","head","contents","jsObject","currentContentType","JSON","stringify","factory"],"mappings":"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"}